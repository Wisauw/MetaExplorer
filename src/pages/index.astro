
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Image Metadata Viewer</title>
  <link rel="icon" type="image/png" href="https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f4f7.png">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  <style>
    :root {
      --primary-color: #3B82F6;
      --primary-hover: #2563EB;
      --bg-color: #F9FAFB;
      --card-bg: #FFFFFF;
      --text-primary: #1F2937;
      --text-secondary: #6B7280;
      --border-color: #E5E7EB;
      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      --radius: 0.5rem;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--bg-color);
      color: var(--text-primary);
      line-height: 1.5;
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
    }

    h1, h2, h3 {
      color: var(--text-primary);
      font-weight: 600;
    }

    h1 {
      font-size: 1.875rem;
      margin-bottom: 2rem;
      text-align: center;
    }

    h2 {
      font-size: 1.5rem;
      margin-bottom: 1rem;
    }

    h3 {
      font-size: 1.25rem;
      margin-bottom: 0.75rem;
      margin-top: 1.5rem;
    }

    .container {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    .card {
      background-color: var(--card-bg);
      border-radius: var(--radius);
      overflow: hidden;
      box-shadow: var(--shadow-md);
    }

    .card-header {
      padding: 1.25rem;
      border-bottom: 1px solid var(--border-color);
      background-color: var(--bg-color);
    }

    .card-body {
      padding: 1.5rem;
    }

    .upload-container {
      border: 2px dashed var(--border-color);
      padding: 2rem;
      text-align: center;
      border-radius: var(--radius);
      cursor: pointer;
      transition: all 0.2s ease;
      background-color: var(--card-bg);
    }

    .upload-container:hover {
      border-color: var(--primary-color);
      background-color: rgba(59, 130, 246, 0.05);
    }

    .upload-icon {
      font-size: 2.5rem;
      color: var(--primary-color);
      margin-bottom: 1rem;
    }

    .preview-section {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
    }

    .image-container {
      display: flex;
      flex-direction: column;
    }

    .image-preview {
      width: 100%;
      max-height: 500px;
      object-fit: contain;
      border-radius: var(--radius);
      box-shadow: var(--shadow-sm);
    }

    .metadata-container {
      background-color: var(--card-bg);
      border-radius: var(--radius);
      box-shadow: var(--shadow-sm);
      overflow-y: auto;
      max-height: 500px;
    }

    .metadata-item {
      margin-bottom: 0.75rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--border-color);
    }

    .metadata-item:last-child {
      border-bottom: none;
      margin-bottom: 0;
      padding-bottom: 0;
    }

    .metadata-label {
      font-weight: 500;
      color: var(--text-secondary);
      font-size: 0.875rem;
      margin-bottom: 0.25rem;
    }

    .metadata-value {
      word-break: break-word;
      font-size: 1rem;
    }

    .map-section {
      margin-top: 2rem;
    }

    .map-container {
      height: 400px;
      border-radius: var(--radius);
      overflow: hidden;
      box-shadow: var(--shadow-md);
    }

    .no-metadata {
      text-align: center;
      padding: 3rem 1.5rem;
      color: var(--text-secondary);
    }

    .no-metadata-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
      opacity: 0.5;
    }

    input[type="file"] {
      display: none;
    }

    .btn {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: var(--radius);
      cursor: pointer;
      font-size: 1rem;
      font-weight: 500;
      transition: background-color 0.2s ease;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .btn:hover {
      background-color: var(--primary-hover);
    }

    .section-title {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .section-icon {
      color: var(--primary-color);
    }

    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }
      
      .preview-section {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <h1>Image Metadata Viewer</h1>
  
  <div class="container">
    <div class="upload-container" id="uploadContainer">
      <input type="file" id="imageInput" accept="image/*">
      <div class="upload-icon">üìÅ</div>
      <p>Click to upload an image or drag and drop</p>
      <button id="uploadButton" class="btn">
        <span>Select Image</span>
      </button>
    </div>
    
    <div id="previewContainer" style="display: none;">
      <div class="preview-section">
        <!-- Image Card -->
        <div class="card image-container">
          <div class="card-header">
            <h2 class="section-title">
              <span class="section-icon">üñºÔ∏è</span>
              Image Preview
            </h2>
          </div>
          <div class="card-body">
            <img id="imagePreview" class="image-preview">
          </div>
        </div>
        
        <!-- Metadata Card -->
        <div class="card metadata-container">
          <div class="card-header">
            <h2 class="section-title">
              <span class="section-icon">üìã</span>
              Image Metadata
            </h2>
          </div>
          <div class="card-body">
            <div id="noMetadata" class="no-metadata">
              <div class="no-metadata-icon">‚ÑπÔ∏è</div>
              <p>No metadata available for this image</p>
            </div>
            <div id="metadataList" style="display: none;"></div>
          </div>
        </div>
      </div>
      
      <!-- Map Section (Separated) -->
      <div id="mapSection" class="map-section" style="display: none;">
        <div class="card">
          <div class="card-header">
            <h2 class="section-title">
              <span class="section-icon">üìç</span>
              Location
            </h2>
          </div>
          <div class="card-body">
            <div id="map" class="map-container"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/exif-js/2.3.0/exif.js"></script>
  <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>

  <script is:inline>
    let map = null;
    let marker = null;

    document.addEventListener('DOMContentLoaded', () => {
      const uploadContainer = document.getElementById('uploadContainer');
      const imageInput = document.getElementById('imageInput');
      const uploadButton = document.getElementById('uploadButton');
      const previewContainer = document.getElementById('previewContainer');
      const imagePreview = document.getElementById('imagePreview');
      const metadataList = document.getElementById('metadataList');
      const noMetadata = document.getElementById('noMetadata');
      const mapSection = document.getElementById('mapSection');

      uploadButton.addEventListener('click', () => {
        imageInput.click();
      });

      uploadContainer.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadContainer.style.borderColor = '#3B82F6';
        uploadContainer.style.backgroundColor = 'rgba(59, 130, 246, 0.05)';
      });

      uploadContainer.addEventListener('dragleave', () => {
        uploadContainer.style.borderColor = '';
        uploadContainer.style.backgroundColor = '';
      });

      uploadContainer.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadContainer.style.borderColor = '';
        uploadContainer.style.backgroundColor = '';
        if (e.dataTransfer.files.length) {
          handleImageUpload(e.dataTransfer.files[0]);
        }
      });

      imageInput.addEventListener('change', (e) => {
        if (e.target.files.length) {
          handleImageUpload(e.target.files[0]);
        }
      });

      function handleImageUpload(file) {
        if (!file.type.match('image.*')) {
          alert('Please select an image file');
          return;
        }

        const reader = new FileReader();

        reader.onload = (e) => {
          
          imagePreview.src = e.target.result;
          previewContainer.style.display = 'block';
          
          
          const img = new Image();
          img.src = e.target.result;
          
          img.onload = function() {
           
            EXIF.getData(img, function() {
              const exifData = EXIF.getAllTags(this);
              displayMetadata(exifData);
            });
          };
        };

        reader.readAsDataURL(file);
      }

      function displayMetadata(exifData) {

        metadataList.innerHTML = '';
        
        if (Object.keys(exifData).length === 0) {
          noMetadata.style.display = 'block';
          metadataList.style.display = 'none';
          mapSection.style.display = 'none';
          return;
        }
        
        noMetadata.style.display = 'none';
        metadataList.style.display = 'block';
        
       
        const ignoredTags = ['thumbnail', 'ThumbnailImage', 'UserComment', 'MakerNote'];
        let hasLocation = false;
        let lat = null;
        let lng = null;
        
        
        const categories = {
          'Basic': ['Make', 'Model', 'Software', 'DateTime', 'DateTimeOriginal', 'DateTimeDigitized'],
          'Camera': ['ExposureTime', 'FNumber', 'ExposureProgram', 'ISOSpeedRatings', 'ShutterSpeedValue', 'ApertureValue', 'Flash', 'FocalLength', 'WhiteBalance'],
          'Image': ['PixelXDimension', 'PixelYDimension', 'XResolution', 'YResolution', 'ResolutionUnit', 'Orientation'],
          'Location': ['GPSLatitude', 'GPSLongitude', 'GPSAltitude', 'GPSLatitudeRef', 'GPSLongitudeRef', 'GPSAltitudeRef'],
          'Other': []
        };
        
        const categorizedData = {};
        
        
        for (const tag in exifData) {
          if (ignoredTags.includes(tag)) continue;
          
          const value = exifData[tag];
          if (value === undefined) continue;
          
          let assigned = false;
          
          for (const category in categories) {
            if (categories[category].includes(tag)) {
              if (!categorizedData[category]) categorizedData[category] = [];
              categorizedData[category].push({ tag, value });
              assigned = true;
              break;
            }
          }
          
          if (!assigned) {
            if (!categorizedData['Other']) categorizedData['Other'] = [];
            categorizedData['Other'].push({ tag, value });
          }
 
          if (tag === 'GPSLatitude' && exifData.GPSLatitudeRef) {
            hasLocation = true;
            lat = convertDMSToDD(value, exifData.GPSLatitudeRef);
          }
          
          if (tag === 'GPSLongitude' && exifData.GPSLongitudeRef) {
            hasLocation = true;
            lng = convertDMSToDD(value, exifData.GPSLongitudeRef);
          }
        }

        for (const category in categorizedData) {
          if (categorizedData[category].length > 0) {
            const categoryTitle = document.createElement('h3');
            categoryTitle.textContent = category;
            metadataList.appendChild(categoryTitle);
            
            for (const item of categorizedData[category]) {
              const metadataItem = document.createElement('div');
              metadataItem.className = 'metadata-item';
              
              const label = document.createElement('div');
              label.className = 'metadata-label';
              label.textContent = formatExifTag(item.tag);
              
              const valueElement = document.createElement('div');
              valueElement.className = 'metadata-value';
              valueElement.textContent = formatExifValue(item.tag, item.value);
              
              metadataItem.appendChild(label);
              metadataItem.appendChild(valueElement);
              metadataList.appendChild(metadataItem);
            }
          }
        }
        
        if (hasLocation && lat !== null && lng !== null) {
          mapSection.style.display = 'block';
          initMap(lat, lng);
        } else {
          mapSection.style.display = 'none';
        }
      }
      
      function formatExifTag(tag) {
        return tag
          .replace(/([A-Z])/g, ' $1')
          .replace(/^./, function(str) { return str.toUpperCase(); });
      }
      
      function formatExifValue(tag, value) {
        if (Array.isArray(value)) {
          if (tag.includes('GPS') && tag.includes('itude')) {
            return value[0] + '¬∞ ' + value[1] + "' " + value[2] + '"';
          }
          return value.join(', ');
        }
        
        if (tag === 'DateTimeOriginal' || tag === 'DateTime' || tag.includes('Date')) {
          return new Date(value.replace(/:/g, '-', 2)).toLocaleString();
        }
        
        if (tag === 'ExposureTime') {
          return `${value.numerator}/${value.denominator}s`;
        }
        
        if (tag === 'FNumber') {
          return `f/${value}`;
        }
        
        return value.toString();
      }
      
      function convertDMSToDD(dms, ref) {
        const degrees = dms[0];
        const minutes = dms[1];
        const seconds = dms[2];
        
        let dd = degrees + minutes / 60 + seconds / 3600;
        
        if (ref === 'S' || ref === 'W') {
          dd = -dd;
        }
        
        return dd;
      }
      
      function initMap(lat, lng) {
        if (map) {
          map.remove();
        }
        
        map = L.map('map').setView([lat, lng], 13);
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        marker = L.marker([lat, lng]).addTo(map)
          .bindPopup('Image Location')
          .openPopup();
          
        
        setTimeout(() => {
          map.invalidateSize();
        }, 100);
      }
    });
  </script>
</body>
</html>